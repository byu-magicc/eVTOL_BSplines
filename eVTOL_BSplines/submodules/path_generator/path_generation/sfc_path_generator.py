#this file re implements the Path Generator's stuff, but this time rewritten to make more sense
#and to be a greater deal of optimality.


import os, sys
import numpy as np
from scipy.optimize import minimize, Bounds, LinearConstraint, NonlinearConstraint, Bounds
from path_generation.matrix_evaluation import get_M_matrix, evaluate_point_on_interval
from PathObjectivesAndConstraints.python_wrappers.objective_functions import ObjectiveFunctions
from PathObjectivesAndConstraints.python_wrappers.curvature_constraints import CurvatureConstraints
from PathObjectivesAndConstraints.python_wrappers.obstacle_constraints import ObstacleConstraints
from PathObjectivesAndConstraints.python_wrappers.incline_constraints import InclineConstraints
from PathObjectivesAndConstraints.python_wrappers.waypoint_constraints import WaypointConstraints
from bsplinegenerator.bspline_to_minvo import get_composite_bspline_to_minvo_conversion_matrix
from path_generation.safe_flight_corridor import SFC_Data, SFC
from path_generation.obstacle import Obstacle
from path_generation.waypoint_data import Waypoint, WaypointData
from eVTOL_BSplines.message_types.msg_control_points import MSG_Control_Points
import time
from copy import deepcopy
from bsplinegenerator.bspline_to_minvo import convert_list_to_minvo_control_points
from path_generation.sfc_path_generator_helpers import *


import cvxpy as cp




class SFC_PathGenerator:


    #creates the initialization function.
    def __init__(self,
                 num_intervals_free_space: int = 5):
        #sets the dimension to two for now
        self._dimension = 2
        #sets the number of intervals free space
        self.num_intervals_free_space = num_intervals_free_space
        #I'm only dealing with 3rd degree bsplines (called order in his stuff. I know - it's annoying)
        self._order = 3
        #gets the Minvo conversion matrix
        self._Minvo_matrix = get_M_matrix(order=self._order)
        #gets the objective functions from the c files
        self._objective_func_obj = ObjectiveFunctions(self._dimension)
        self._curvature_const_obj = CurvatureConstraints(self._dimension)
        self._waypoint_const_obj = WaypointConstraints(self._dimension)
        self._obstacle_cons_obj = ObstacleConstraints(self._dimension)


    #defines the function to generate the path using control points
    def generatePath(self,
                     M: int,
                     startControlPoints: np.ndarray,
                     endControlPoints: np.ndarray,
                     sfc_data: SFC_Data,
                     numPointsPerUnit: float,
                     objectiveFunctionType: str,
                     curvedControlPoints: list[list[np.ndarray]] = None,
                     overlappingConstraints: bool = False,
                     nonConvexConstraints: bool = False):
        

        #calls the function to get the list of lengths
        numCntPts_list = getNumCntPts_list(sfc_data=sfc_data,
                                           numPointsPerUnit=numPointsPerUnit)
        
        optimizedControlPoints_convex \
              = self.generatePath_convex(numCntPts_list=numCntPts_list,
                                         startControlPoints=startControlPoints,
                                         endControlPoints=endControlPoints,
                                         sfc_data=sfc_data,
                                         curvedControlPoints=curvedControlPoints,
                                         objectiveFunctionType=objectiveFunctionType,
                                         overlappingConstraints=overlappingConstraints)

        #case we are dealing with 
        if nonConvexConstraints:

            outputControlPoints = self.generatePath_nonConvexConstraints()
        else:
            outputControlPoints = optimizedControlPoints_convex


        #returns the output control points
        return outputControlPoints

        



    #defines the function to use the existing control points generated by the
    #CVXPY Method, and then optimizes them for curvature and other non-convex 
    #constraints and so forth
    def generatePath_nonConvexConstraints(self,
                                          numCntPts_list: list[int],
                                          startControlPoints: np.ndarray,
                                          endControlPoints: np.ndarray,
                                          max_curvature: np.float64 = None,
                                          sfc_data: SFC_Data = None,
                                          ):

        potato = 0

    #defines the function go solve for the control points using convex cvxpy methods
    def generatePath_convex(self,
                            numCntPts_list: list[int],
                            startControlPoints: np.ndarray,
                            endControlPoints: np.ndarray,
                            sfc_data: SFC_Data,
                            curvedControlPoints: list[list[np.ndarray]] = None,
                            objectiveFunctionType: str = 'minimize_distance',
                            overlappingConstraints=False):
        startControlPoints, endControlPoints\
              = getShortenedControlPoints(startControlPoints=startControlPoints,
                                          endControlPoints=endControlPoints)
        
        #gets the sfc list
        sfc_list = sfc_data.get_sfc_list()


        #gets the number of control points
        numControlPoints = getNumCntPts(numCntPts_list=numCntPts_list,
                                        degree = self._order)


        #creates the control points variable
        controlPoints_cpVar = cp.Variable((2, numControlPoints))

        #gets the control points constraints

        #case overlapping Constraints (where the overlapping control points need to meet both requirements)
        if overlappingConstraints:
            controlPoints_constraints \
                = self.get_overlapping_control_points_constraints(sfc_data=sfc_data,
                                                                  numCntPts_list=numCntPts_list,
                                                                  controlPoints_var=controlPoints_cpVar,
                                                                  startControlPoints=startControlPoints,
                                                                  endControlPoints=endControlPoints)
        #case non overlapping constraints, where the overlapping control points only are in one constraint
        else:
            controlPoints_constraints \
                = self.get_singular_control_points_constraints(sfc_data=sfc_data,
                                                               numCntPts_list=numCntPts_list,
                                                               controlPoints_var=controlPoints_cpVar,
                                                               startControlPoints=startControlPoints,
                                                               endControlPoints=endControlPoints)
            
        
        #case min distance objective function
        if objectiveFunctionType == 'minimize_distance':

            #gets the minimize length objective function
            objectiveFunction = self.minimum_distance_objective(cpVar_cntPts=controlPoints_cpVar)
        elif objectiveFunctionType == 'minimize_acceleration':
            #gets  the minimize acceleration objective function
            objectiveFunction = self.minimum_acceleration_objective(cpVar_cntPts=controlPoints_cpVar)

        #creates the problem to solve
        problem = cp.Problem(objective=objectiveFunction,
                             constraints=controlPoints_constraints)
        
        #calls the solve function for the problem
        problem.solve(solver=cp.CLARABEL)

        print("Status: ", problem.status)
        print("Objective: ", problem.value)

        #gets the output control points
        outputControlPoints = controlPoints_cpVar.value

        return outputControlPoints


    #creates the function to define the objective function
    def minimum_distance_objective(self, cpVar_cntPts: cp.Variable):
        #gets the velocity control poitns
        velocityControlPoints_cp = cpVar_cntPts[:,0:-1] - cpVar_cntPts[:,1:]

        minimizeLength_objectiveFunction = cp.Minimize(cp.sum(cp.norm(velocityControlPoints_cp, axis=1)))

        #returns the objective
        return minimizeLength_objectiveFunction

    #creates the function to get the minimum acceleration objective function
    def minimum_acceleration_objective(self, cpVar_cntPts: cp.Variable):
        #gets the jerk control points
        jerkCntPts_cp = cpVar_cntPts[:,3:] -3*cpVar_cntPts[:,2:-1] + 3*cpVar_cntPts[:,1:-2] - cpVar_cntPts[:,0:-3]
        #gets the objective
        objective = cp.Minimize(cp.sum(cp.norm(jerkCntPts_cp, axis=1)))
        #returns the objective
        return objective

    #creates the function to get singlar control points constraints
    #This one is actually Bad. The spline constantly cuts corners.
    def get_singular_control_points_constraints(self,
                                                sfc_data: SFC_Data,
                                                numCntPts_list: list[int],
                                                controlPoints_var: cp.Variable,
                                                startControlPoints: np.ndarray,
                                                endControlPoints: np.ndarray):
        

        #gets the sfc list
        sfc_list = sfc_data.get_sfc_list()

        #creates the constraints 
        controlPoints_constraints = []

        #creates the index
        index = 0

        for i, sfc in enumerate(sfc_list):

            #gets the number of control points

            #checks if we are in the first corridor. if we are, then we
            #apply the constraints on all the control points in this one
            if i == 0:
                numControlPoints_perConstraint = numCntPts_list[i]
            #otherwise the number of control points per constraint is M
            else:
                numControlPoints_perConstraint = numCntPts_list[i] - self._order
            #gets the partition of the control points variable
            controlPointsPartition = controlPoints_var[:,index:(index+numControlPoints_perConstraint)]

            #gets the normals and the vertices
            normals, vertices = sfc.getNormalsVertices_2d()

            #gets the A and b matrix
            A, b = generate_A_b(normalVectors=normals,
                                vertices=vertices)

            #creates the inequality constraint
            inequalityConstraint_temp = [A @ controlPointsPartition <= b]

            #adds to the constraints
            controlPoints_constraints += inequalityConstraint_temp

            #adds the number of control points to the index
            index += numControlPoints_perConstraint

        #gets the start control points variables
        startControlPoints_cpVar = controlPoints_var[:, :self._order]
        endControlPoints_cpVar = controlPoints_var[:, (-self._order):]

        startEqualityConstraint = [startControlPoints_cpVar == startControlPoints]
        endEqualityConstraint = [endControlPoints_cpVar == endControlPoints]

        #adds those in
        controlPoints_constraints += startEqualityConstraint
        controlPoints_constraints += endEqualityConstraint

        #returns the constraints
        return controlPoints_constraints


    #creates the function for overlapping control points constraints
    def get_overlapping_control_points_constraints(self,
                                                sfc_data: SFC_Data,
                                                numCntPts_list: list[int],
                                                controlPoints_var: cp.Variable,
                                                startControlPoints: np.ndarray,
                                                endControlPoints: np.ndarray):
        
        #gets the sfc list
        sfc_list = sfc_data.get_sfc_list()

        #creates the control poitns index
        controlPoints_index = 0 

        #creates the list of conditions
        controlPoints_constraints = []

        #iterates over each safe flight corridor in the sfc list
        for i, sfc in enumerate(sfc_list):

            #gets the number of control points in the current corridor
            numCntPoints_inCorridor = numCntPts_list[i]

            #gets the incremental index
            incremental_index = numCntPoints_inCorridor - self._order

            #gets the current control points partition
            controlPointsPartition \
                  = controlPoints_var[:,(controlPoints_index):(controlPoints_index+numCntPoints_inCorridor)]

            #gets the normals and vertices
            normals, vertices = sfc.getNormalsVertices_2d()

            #gets the A and b matrices
            A, b = generate_A_b(normalVectors=normals,
                                vertices=vertices)
            
            #gets the temp inequality constraint
            inequalityConstraint_temp = [A @ controlPointsPartition <= b]

            #adds this to the constraints
            controlPoints_constraints += inequalityConstraint_temp

            #increments the control points index by the incremental amount
            controlPoints_index += incremental_index

        #gets the varaibles corresponding to the start and end control points
        startControlPoints_cpVar = controlPoints_var[:, :self._order]
        endControlPoints_cpVar = controlPoints_var[:, (-self._order):]


        #creates the equality constraints for start and end conditions
        startEqualityConstraint = [startControlPoints_cpVar == startControlPoints]
        endEqualityConstraint = [endControlPoints_cpVar == endControlPoints]

        #adds these equality constraints to the main constraints list
        controlPoints_constraints += startEqualityConstraint
        controlPoints_constraints += endEqualityConstraint

        #returns the constraints list
        return controlPoints_constraints
    
    #defines the function to obtain the scipy control points for the Non-Convex
    #post processing optimization, which yields some cleaner results with less curvature
    def get_control_points_constraints_scipy(self,
                                             max_curvature: float,
                                             sfc_data: SFC_Data,
                                             numCntPts_list: list[int],
                                             startControlPoints: np.ndarray,
                                             endControlPoints: np.ndarray):
    
        #gets the list of constraints
        constraints = []

        #gets the sfc constraints
        sfc_constraints = self.get_constraints_sfc_scipy(sfc_data=sfc_data)
        constraints.append(sfc_constraints)



        return 0
    

    #gets the sfc constraints for scipy
    def get_constraints_sfc_scipy(self,
                                  sfc_data: SFC_Data):
        sfc_list = sfc_data.get_sfc_list()

        #creates the linear constriants list
        linearConstraint_list = []

        #gets the linear constraints 
        for sfc in sfc_list:

            #gets the normals and the vertices
            normals, vertices = sfc.getNormalsVertices_2d()

            #gets the A and b matrices corresponding to those two
            A, b = generate_A_b(normalVectors=normals,
                                vertices=vertices)
            
            #gets the linear constraint corresponding to the A, and b vectors
            tempConstraint = LinearConstraint(A=A,
                                              ub=b)
            
            #appends the constraint to the linear constraints list
            linearConstraint_list.append(tempConstraint)


        #returns the linear constraint list
        return linearConstraint_list


    #gets the start and stop constraints for scipy
    def get_constraints_init_final_scipy(self,
                                   numCntPts_list: list[int],
                                   startControlPoints: np.ndarray,
                                   endControlPoints: np.ndarray):
        
        #gets the A matrix
        dimension = np.shape(startControlPoints)[0]
        numStartControlPoints = np.shape(startControlPoints)[1]
        numEndControlPoints = np.shape(endControlPoints)[1]

        A_length = dimension * numStartControlPoints

        #creates the start A matrix
        A_start = np.eye(N=A_length)

        #creates the end A matrix
        A_end = np.eye(N=A_length)

        #gets the start contorl points stacked
        startControlPoints_stacked = stackMatrix(controlPoints=startControlPoints)
        endControlPoints_stacked = stackMatrix(controlPoints=endControlPoints)

        #creates the constraints list
        equalityConstraints = []

        equalityConstraints.append(startControlPoints)


